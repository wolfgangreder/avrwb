/*
 * $Id$
 *
 * Copyright (C) 2016 Wolfgang Reder <wolfgang.reder@aon.at>.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 *
 */
package com.avrwb.programmer;

import gnu.io.Raw;
import gnu.io.RawPortEvent;
import gnu.io.SerialPort;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.avrwb.programmer//FreeProgrammer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FreeProgrammerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.avrwb.programmer.FreeProgrammerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FreeProgrammerAction",
        preferredID = "FreeProgrammerTopComponent"
)
@Messages({
  "CTL_FreeProgrammerAction=FreeProgrammer",
  "CTL_FreeProgrammerTopComponent=FreeProgrammer Window",
  "HINT_FreeProgrammerTopComponent=This is a FreeProgrammer window"
})
public final class FreeProgrammerTopComponent extends TopComponent
{

  public FreeProgrammerTopComponent()
  {
    initComponents();
    setName(Bundle.CTL_FreeProgrammerTopComponent());
    setToolTipText(Bundle.HINT_FreeProgrammerTopComponent());

  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
   * this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    jButton1 = new javax.swing.JButton();

    jLabel1.setLabelFor(edPort);
    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FreeProgrammerTopComponent.class, "FreeProgrammerTopComponent.jLabel1.text")); // NOI18N

    edPort.setText(org.openide.util.NbBundle.getMessage(FreeProgrammerTopComponent.class, "FreeProgrammerTopComponent.edPort.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(FreeProgrammerTopComponent.class, "FreeProgrammerTopComponent.jButton1.text")); // NOI18N
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton1ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jButton1)
          .addComponent(edPort, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(540, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(edPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jButton1)
        .addContainerGap(445, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
  {//GEN-HEADEREND:event_jButton1ActionPerformed
    doProgram();
  }//GEN-LAST:event_jButton1ActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private final javax.swing.JTextField edPort = new javax.swing.JTextField();
  private javax.swing.JButton jButton1;
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened()
  {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed()
  {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p)
  {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version",
                  "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p)
  {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  private void doProgram()
  {
    try (Raw port = new Raw(edPort.getText())) {
      port.setRawPortParams(250_000,
                            SerialPort.DATABITS_8,
                            SerialPort.STOPBITS_1,
                            SerialPort.PARITY_NONE);
      //int baudBase = port.getBaudBase();
//      int divisor = baudBase / 250_000;
//      port.setDivisor(divisor);
//      baudBase = port.getBaudRate();
//      divisor = port.getDivisor();
//      port.addEventListener((SerialPortEvent ev) -> {
//        if (ev.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
//          try (LineNumberReader reader = new LineNumberReader(new InputStreamReader(port.getInputStream()))) {
//            String line;
//            while ((line = reader.readLine()) != null) {
//              System.out.println(line);
//            }
//          } catch (IOException ex) {
//            Exceptions.printStackTrace(ex);
//
//          }
//        }
//      });
      port.addEventListener((RawPortEvent ev) -> {
        if (ev.getEventType() == RawPortEvent.DATA_AVAILABLE) {
          try (LineNumberReader reader = new LineNumberReader(new InputStreamReader(port.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
              System.out.println(line);
            }
          } catch (IOException ex) {
            Exceptions.printStackTrace(ex);

          }
        }
      });
      port.notifyOnDataAvailable(true);
      try (OutputStreamWriter out = new OutputStreamWriter(port.getOutputStream())) {
        out.write('h');
      }
    } catch (Error | Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }

}
